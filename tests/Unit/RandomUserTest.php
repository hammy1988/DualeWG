<?php

namespace Tests\Unit;

use App\Flatshare;
use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class RandomUserTest extends TestCase
{

    private $user_a;
    private $user_b;
    private $flatshare_a;

    // Es werden 3 Tests durchgeführt!
    // Allgemein geht es darum, dass im Easteregg nicht kaputt gehen darf.
    // Daher dürfen die Leute, die eine WG-Anfrage gestellt haben nicht neuer Admin werden!!!
    // 
    //
    //    1. Test: In der WG ist nur ein Mitglied
    //             Die Funktion newRandomAdmin() soll null zurückgeben,
    //             denn kein neuer Admin ausgewählt werden kann
    //
    //    2. Test: In der WG ist ein Mitglied und eine WG-Anfrage
    //             Die Funktion newRandomAdmin() soll null zurückgeben,
    //             denn der Anfragende kann nicht zum Admin gewählt werden
    //
    //    3. Test: In der WG sind zwei Mitglieder
    //             Der andere Mitbewohner (der aktuell kein Admin ist)
    //             wird als Admin ausgewählt


    // Das Setup erstellt zwei Benutzer, eine WG und Benutzer "a" joint diese WG
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub


        $this->user_a = factory(User::class)->create();
        $this->user_b = factory(User::class)->create();

        $this->flatshare_a = factory(Flatshare::class)->make([
            "admin_id" => $this->user_a->id,
        ]);
        $this->flatshare_a->save();

        $this->user_a->flatshare_id = $this->flatshare_a->id;
        $this->user_a->flatsharejoin_at = now();
        $this->user_a->save();

    }

    // Die Benutzer und die WG werden wieder gelöscht
    protected function tearDown(): void
    {
        $this->flatshare_a->delete();
        $this->user_a->delete();
        $this->user_b->delete();

        parent::tearDown(); // TODO: Change the autogenerated stub

    }


    //    1. Test: In der WG ist nur ein Mitglied
    //             Die Funktion newRandomAdmin() soll null zurückgeben,
    //             denn kein neuer Admin ausgewählt werden kann
    public function testRandomUserOneUserNoRequests() {
        $this->assertNull($this->user_a->flatshare->newRandomAdmin($this->user_a));
    }

    //    2. Test: In der WG ist ein Mitglied und eine WG-Anfrage
    //             Die Funktion newRandomAdmin() soll null zurückgeben,
    //             denn der Anfragende kann nicht zum Admin gewählt werden
    public function testRandomUserOneUserOneRequests() {

        $this->user_b->flatshare_id = $this->flatshare_a->id;
        $this->user_b->save();

        $this->assertNull($this->user_a->flatshare->newRandomAdmin($this->user_a));
    }


    //    3. Test: In der WG sind zwei Mitglieder
    //             Der andere Mitbewohner (der aktuell kein Admin ist)
    //             wird als Admin ausgewählt
    public function testRandomUserTwoUserNoRequests() {

        $this->user_b->flatshare_id = $this->flatshare_a->id;
        $this->user_b->flatsharejoin_at = now();
        $this->user_b->save();

        $this->assertNotNull($this->user_a->flatshare->newRandomAdmin($this->user_a));
        $this->assertEquals($this->user_b->id, $this->user_a->flatshare->newRandomAdmin($this->user_a)->id);
    }


}
